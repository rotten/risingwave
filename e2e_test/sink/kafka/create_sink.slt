statement ok
create table t_kafka (
    id integer primary key,
    v_varchar varchar,
    v_smallint smallint,
    v_integer integer,
    v_bigint bigint,
    v_float real,
    v_double double precision,
    v_timestamp timestamp
);

statement error cannot connect to kafka broker
create sink sink_non_exist_broker from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'make no sense',
    topic = 'test-rw-sink-append-only',
    force_append_only = 'true',
    type = 'append-only',
);

# Test create sink with connection
# Create a mock connection
statement ok
create connection mock with (
    type = 'privatelink',
    provider = 'mock',
);

# Refer to a non-existant connection
statement error
create sink si_kafka_append_only_conn from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
    force_append_only = 'true',
    connection.name = 'nonexist',
);

# Create sink with connection
statement ok
create sink si_kafka_append_only_conn from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
    force_append_only = 'true',
    connection.name = 'mock',
);

# Try to drop connection mock, which is in use
statement error
drop connection mock;

# Drop sink
statement ok
drop sink si_kafka_append_only_conn;

# Drop connection
statement ok
drop connection mock;

# Connection test clean-up finished

statement error sink cannot be append-only
create sink si_kafka_append_only from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
);

statement ok
create sink si_kafka_append_only from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
    force_append_only = 'true'
);

statement error primary key not defined
create sink si_kafka_upsert from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-upsert',
    type = 'upsert',
);

statement ok
create sink si_kafka_upsert from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-upsert',
    type = 'upsert',
    primary_key = 'id',
);

statement ok
create sink si_kafka_debezium from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id',
);

statement error primary key not defined for debezium kafka sink
create sink debezium_without_pk from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
);

statement ok
create sink multiple_pk from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,v_varchar'
);

statement ok
drop sink multiple_pk;

statement error Sink primary key column not found: invalid.
create sink invalid_pk_column from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = '127.0.0.1:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,invalid'
);

statement ok
insert into t_kafka values
    (1, '8DfUFencLe', 31031, 1872, 1872, 26261.416, 23956.39329760601, '2023-04-14 06:27:14.104742'),
    (2, 'sIo1XXVeHZ', 22690, 4598, 4598, 27031.225, 31923.077305746086, '2023-04-13 23:44:04.869742'),
    (3, 'LVLAhd1pQv', 5985, 5894, 14894, 2660.2903, 9742.475509566086, '2023-04-13 23:36:51.269742'),
    (4, 'ORjwy3oMNb', 6306, 7406, 24962, 21217.777, 3119.719721891862, '2023-04-14 01:12:07.993742'),
    (5, 'sSkKswxrYd', 22765, 9253, 9253, 22749.5, 17464.91553421121, '2023-04-14 03:57:22.324742'),
    (6, 'V4y71v4Gip', 4014, 10844, 28842, 5885.368, 11210.458724794062, '2023-04-13 10:42:02.137742'),
    (7, 'YIVLnWxHyf', 10324, 12652, 15914, 3946.7434, 10967.182297153104, '2023-04-14 04:41:03.083742'),
    (8, 'lv7Eq3g8hx', 194, 19036, 28641, 13652.073, 993.408963466774, '2023-04-13 13:52:09.356742'),
    (9, 'nwRq4zejSQ', 10028, 20090, 24837, 20699.559, 11615.276406159757, '2023-04-13 12:40:42.487742'),
    (10, '0oVqRIHqkb', 26951, 20674, 20674, 19387.238, 9042.404483827515, '2023-04-13 16:40:58.888742');
