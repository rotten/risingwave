syntax = "proto3";

package catalog;

import "common.proto";
import "data.proto";
import "expr.proto";
import "plan_common.proto";

option java_package = "com.risingwave.proto";
option optimize_for = SPEED;

// A mapping of column indices.
message ColIndexMapping {
  // The size of the target space.
  uint64 target_size = 1;
  // Each subscript is mapped to the corresponding element.
  // For those not mapped, the value will be negative.
  repeated int64 map = 2;
}

message WatermarkDesc {
  // The column idx the watermark is on
  uint32 watermark_idx = 1;
  // The expression to calculate the watermark value.
  expr.ExprNode expr = 2;
}

enum SchemaRegistryNameStrategy {
  TOPIC_NAME_STRATEGY_UNSPECIFIED = 0;
  RECORD_NAME_STRATEGY = 1;
  TOPIC_RECORD_NAME_STRATEGY = 2;
}

enum StreamJobStatus {
  // Prefixed by `STREAM_JOB_STATUS` due to protobuf namespacing rules.
  STREAM_JOB_STATUS_UNSPECIFIED = 0;
  CREATING = 1;
  CREATED = 2;
}

// How the stream job was created will determine
// whether they are persisted.
enum CreateType {
  CREATE_TYPE_UNSPECIFIED = 0;
  BACKGROUND = 1;
  FOREGROUND = 2;
}

message StreamSourceInfo {
  // deprecated
  plan_common.RowFormatType row_format = 1;
  string row_schema_location = 2;
  bool use_schema_registry = 3;
  string proto_message_name = 4;
  int32 csv_delimiter = 5;
  bool csv_has_header = 6;
  string upsert_avro_primary_key = 7;
  plan_common.FormatType format = 8;
  plan_common.EncodeType row_encode = 9;
  SchemaRegistryNameStrategy name_strategy = 10;
  optional string key_message_name = 11;
  plan_common.StorageTableDesc upstream_table = 12;
}

message Source {
  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  // The column index of row ID. If the primary key is specified by the user,
  // this will be `None`.
  optional uint32 row_id_index = 5;
  // Columns of the source.
  repeated plan_common.ColumnCatalog columns = 6;
  // Column id of the primary key specified by the user. If the user does not
  // specify a primary key, the vector will be empty.
  repeated int32 pk_column_ids = 7;
  // Properties specified by the user in WITH clause.
  map<string, string> properties = 8;

  uint32 owner = 9;

  StreamSourceInfo info = 10;
  // Define watermarks on the source. The `repeated` is just for forward
  // compatibility, currently, only one watermark on the source
  repeated WatermarkDesc watermark_descs = 11;
  // Indicate whether this source is created by table.
  oneof optional_associated_table_id {
    uint32 associated_table_id = 12;
  }
  string definition = 13;
  optional uint32 connection_id = 14;

  optional uint64 initialized_at_epoch = 15;
  optional uint64 created_at_epoch = 16;

  // Per-source catalog version, used by schema change.
  uint64 version = 100;
}

enum SinkType {
  UNSPECIFIED = 0;
  APPEND_ONLY = 1;
  FORCE_APPEND_ONLY = 2;
  UPSERT = 3;
}

// the catalog of the sink. There are two kind of schema here. The full schema is all columns
// stored in the `column` which is the sink executor/fragment's output schema. The visible
// schema contains the columns whose `is_hidden` is false, which is the columns sink out to the
// external system. The distribution key and all other keys are indexed in the full schema.
message Sink {
  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  repeated plan_common.ColumnCatalog columns = 5;
  // Primary key derived from the SQL by the frontend.
  repeated common.ColumnOrder plan_pk = 6;
  repeated uint32 dependent_relations = 7;
  repeated int32 distribution_key = 8;
  // User-defined primary key indices for the upsert sink.
  repeated int32 downstream_pk = 9;
  SinkType sink_type = 10;
  uint32 owner = 11;
  map<string, string> properties = 12;
  string definition = 13;
  optional uint32 connection_id = 14;
  optional uint64 initialized_at_epoch = 15;
  optional uint64 created_at_epoch = 16;
  string db_name = 17;
  string sink_from_name = 18;
  StreamJobStatus stream_job_status = 19;
}

message Connection {
  message PrivateLinkService {
    enum PrivateLinkProvider {
      UNSPECIFIED = 0;
      MOCK = 1;
      AWS = 2;
    }
    PrivateLinkProvider provider = 1;
    string service_name = 2;
    string endpoint_id = 3;
    map<string, string> dns_entries = 4;
    string endpoint_dns_name = 5;
  }

  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  oneof info {
    PrivateLinkService private_link_service = 5;
  }
  uint32 owner = 6;
}

message Index {
  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  uint32 owner = 5;
  uint32 index_table_id = 6;
  uint32 primary_table_id = 7;
  // Only `InputRef` type index is supported Now.
  // The index of `InputRef` is the column index of the primary table.
  repeated expr.ExprNode index_item = 8;
  repeated int32 original_columns = 9;

  optional uint64 initialized_at_epoch = 10;
  optional uint64 created_at_epoch = 11;
  StreamJobStatus stream_job_status = 12;
}

message Function {
  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  uint32 owner = 9;
  repeated data.DataType arg_types = 5;
  data.DataType return_type = 6;
  string language = 7;
  string link = 8;
  string identifier = 10;

  oneof kind {
    ScalarFunction scalar = 11;
    TableFunction table = 12;
    AggregateFunction aggregate = 13;
  }
  message ScalarFunction {}
  message TableFunction {}
  message AggregateFunction {}
}

// See `TableCatalog` struct in frontend crate for more information.
message Table {
  enum TableType {
    UNSPECIFIED = 0;
    TABLE = 1;
    MATERIALIZED_VIEW = 2;
    INDEX = 3;
    INTERNAL = 4;
  }

  message TableVersion {
    // The version number, which will be 0 by default and be increased by 1 for
    // each schema change in the frontend.
    uint64 version = 1;
    // The ID of the next column to be added, which is used to make all columns
    // in the table have unique IDs, even if some columns have been dropped.
    int32 next_column_id = 2;
  }

  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  repeated plan_common.ColumnCatalog columns = 5;
  repeated common.ColumnOrder pk = 6;
  repeated uint32 dependent_relations = 8;
  oneof optional_associated_source_id {
    uint32 associated_source_id = 9;
  }
  TableType table_type = 10;
  repeated int32 distribution_key = 12;
  // pk_indices of the corresponding materialize operator's output.
  repeated int32 stream_key = 13;
  bool append_only = 14;
  uint32 owner = 15;
  map<string, string> properties = 16;
  uint32 fragment_id = 17;
  // an optional column index which is the vnode of each row computed by the
  // table's consistent hash distribution
  optional uint32 vnode_col_index = 18;
  // An optional column index of row id. If the primary key is specified by users,
  // this will be `None`.
  optional uint32 row_id_index = 19;
  // The column indices which are stored in the state store's value with
  // row-encoding. Currently is not supported yet and expected to be
  // `[0..columns.len()]`.
  repeated int32 value_indices = 20;
  string definition = 21;
  // Used to control whether handling pk conflict for incoming data.
  HandleConflictBehavior handle_pk_conflict_behavior = 22;
  // Anticipated read prefix pattern (number of fields) for the table, which can be utilized
  // for implementing the table's bloom filter or other storage optimization techniques.
  uint32 read_prefix_len_hint = 23;
  repeated int32 watermark_indices = 24;
  repeated int32 dist_key_in_pk = 25;
  // A dml fragment id corresponds to the table, used to decide where the dml statement is executed.
  optional uint32 dml_fragment_id = 26;
  // The range of row count of the table.
  // This field is not always present due to backward compatibility. Use `Cardinality::unknown` in this case.
  plan_common.Cardinality cardinality = 27;

  optional uint64 initialized_at_epoch = 28;
  optional uint64 created_at_epoch = 29;

  // This field is introduced in v1.2.0. It is used to indicate whether the table should use
  // watermark_cache to avoid state cleaning as a performance optimization.
  // In older versions we can just initialize without it.
  bool cleaned_by_watermark = 30;

  // Used to filter created / creating tables in meta.
  StreamJobStatus stream_job_status = 31;

  CreateType create_type = 32;

  // Per-table catalog version, used by schema change. `None` for internal tables and tests.
  // Not to be confused with the global catalog version for notification service.
  TableVersion version = 100;
}

enum HandleConflictBehavior {
  CONFLICT_BEHAVIOR_UNSPECIFIED = 0;
  OVERWRITE = 1;
  IGNORE = 2;
  NO_CHECK = 3;
}

message View {
  uint32 id = 1;
  uint32 schema_id = 2;
  uint32 database_id = 3;
  string name = 4;
  uint32 owner = 5;
  map<string, string> properties = 6;
  string sql = 7;
  repeated uint32 dependent_relations = 8;
  // User-specified column names.
  repeated plan_common.Field columns = 9;
}

message Schema {
  uint32 id = 1;
  uint32 database_id = 2;
  string name = 3;
  uint32 owner = 4;
}

message Database {
  uint32 id = 1;
  string name = 2;
  uint32 owner = 3;
}
